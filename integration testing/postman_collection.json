{
	"info": {
		"_postman_id": "a0c5c7d2-9686-4db3-8d15-f903f81c6bb0",
		"name": "GOT",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "4507098"
	},
	"item": [
		{
			"name": "Characters",
			"item": [
				{
					"name": "Create Character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response",
									"",
									"pm.test('create character', () => {",
									"    response.to.have.status(201)",
									"})",
									"",
									"const payload = response.json()",
									"pm.collectionVariables.set('character_id', payload.id)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":1,\"name\":\"Aegon Targaryen\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8090/characters"
					},
					"response": []
				},
				{
					"name": "Get Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('gets characters', () => {",
									"    pm.response.to.have.status(200)",
									"",
									"    const characters = pm.response.json()",
									"    pm.expect(characters.length).to.be.greaterThan(0)",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://localhost:8090/characters"
					},
					"response": []
				},
				{
					"name": "Get Character By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('gets actor by id', () => {",
									"    pm.response.to.have.status(200)",
									"",
									"    const character = pm.response.json()",
									"    pm.expect(character.name).to.not.eql(null)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://localhost:8090/characters/{{character_id}}"
					},
					"response": []
				},
				{
					"name": "Update Character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('actor is updated', () => {",
									"    pm.response.to.have.status(200)",
									"",
									"    const character = pm.response.json()",
									"    const hasUpdatedInName = character.name.includes('Updated')",
									"    pm.expect(hasUpdatedInName).to.be.true",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":{{character_id}},\"name\":\"Aegon Targaryen Updated\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8090/characters"
					},
					"response": []
				},
				{
					"name": "Delete Character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('delete character', () => {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "http://localhost:8090/characters/{{character_id}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Actors",
			"item": [
				{
					"name": "Create Actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response",
									"",
									"pm.test('create actor', () => {",
									"    response.to.have.status(201)",
									"})",
									"",
									"const payload = response.json()",
									"pm.collectionVariables.set('actor_id', payload.id)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":1,\"name\":\"B.J. Hogg\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8090/actors"
					},
					"response": []
				},
				{
					"name": "Create Character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const payload = pm.response.json()",
									"pm.collectionVariables.set('character2_id', payload.id)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":0,\"name\":\"Addam Marbrand\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8090/characters"
					},
					"response": []
				},
				{
					"name": "Get Actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('gets actors', () => {",
									"    pm.response.to.have.status(200)",
									"",
									"    const actors = pm.response.json()",
									"    pm.expect(actors.length).to.be.greaterThan(0)",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://localhost:8090/actors"
					},
					"response": []
				},
				{
					"name": "Get Actor By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('gets actor by id', () => {",
									"    pm.response.to.have.status(200)",
									"",
									"    const actor = pm.response.json()",
									"    pm.expect(actor.name).to.not.eql(null)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://localhost:8090/actors/{{actor_id}}"
					},
					"response": []
				},
				{
					"name": "Update Actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('actor is updated', () => {",
									"    pm.response.to.have.status(200)",
									"",
									"    const actor = pm.response.json()",
									"    const hasUpdatedInName = actor.name.includes('Updated')",
									"    pm.expect(hasUpdatedInName).to.be.true",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":{{actor_id}},\"name\":\"B.J. Hogg Updated\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8090/actors"
					},
					"response": []
				},
				{
					"name": "Link to Character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('actor is linked to character', () => {",
									"     pm.response.to.have.status(200)",
									"",
									"    const actor = pm.response.json()",
									"    pm.expect(actor.character).to.not.be.null",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": "http://localhost:8090/actors/{{actor_id}}/link_to/{{character2_id}}"
					},
					"response": []
				},
				{
					"name": "Delete Actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('delete actor', () => {",
									"    pm.response.to.have.status(204)",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "http://localhost:8090/actors/{{actor_id}}"
					},
					"response": []
				},
				{
					"name": "Delete Character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('delete character', () => {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "http://localhost:8090/characters/{{character2_id}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Full Integration Tests",
			"item": [
				{
					"name": "Create Actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response",
									"",
									"pm.test('create actor', () => {",
									"    response.to.have.status(201)",
									"})",
									"",
									"const payload = response.json()",
									"pm.collectionVariables.set('actor_id', payload.id)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":null,\"name\":\"B.J. Hogg\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8090/actors"
					},
					"response": []
				},
				{
					"name": "Search for actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('actor shows in reponse', () => {",
									"    const res = pm.response.json()",
									"    const resString = JSON.stringify(res)",
									"    const hasActorName = resString.includes('\"actor_name\":\"B.J. Hogg\"')",
									"    const hasNoCharacterName = resString.includes('\"character_name\":\"\"')",
									"    pm.expect(hasActorName).to.be.true",
									"    pm.expect(hasNoCharacterName).to.be.true",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8090/search?q=B.J.%20Hogg",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "B.J.%20Hogg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const payload = pm.response.json()",
									"pm.collectionVariables.set('character2_id', payload.id)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":0,\"name\":\"Addam Marbrand\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8090/characters"
					},
					"response": []
				},
				{
					"name": "Search for Character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('actor shows in reponse', () => {",
									"    const res = pm.response.json()",
									"    const resString = JSON.stringify(res)",
									"    pm.globals.set('username', resString)",
									"    const hasCharacterName = resString.includes('\"character_name\":\"Addam Marbrand\"')",
									"    const hasNoActorName = resString.includes('\"actor_name\":\"\"')",
									"    pm.expect(hasCharacterName).to.be.true",
									"    pm.expect(hasNoActorName).to.be.true",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8090/search?q=Addam%20Marbrand",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "Addam%20Marbrand"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Link to Character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('actor is linked to character', () => {",
									"     pm.response.to.have.status(200)",
									"",
									"    const actor = pm.response.json()",
									"    pm.expect(actor.character).to.not.be.null",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": "http://localhost:8090/actors/{{actor_id}}/link_to/{{character2_id}}"
					},
					"response": []
				},
				{
					"name": "Search for Link",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('actor shows in reponse', () => {",
									"    const res = pm.response.json()",
									"    const resString = JSON.stringify(res)",
									"    pm.globals.set('username', resString)",
									"    const hasCharacterName = resString.includes('\"character_name\":\"Addam Marbrand\"')",
									"    const hasActorName = resString.includes('\"actor_name\":\"B.J. Hogg\"')",
									"    pm.expect(hasCharacterName).to.be.true",
									"    pm.expect(hasActorName).to.be.true",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8090/search?q=Addam%20Marbrand",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "Addam%20Marbrand"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('actor is updated', () => {",
									"    pm.response.to.have.status(200)",
									"",
									"    const actor = pm.response.json()",
									"    const hasUpdatedInName = actor.name.includes('Updated')",
									"    pm.expect(hasUpdatedInName).to.be.true",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":{{actor_id}},\"name\":\"B.J. Hogg Updated\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8090/actors"
					},
					"response": []
				},
				{
					"name": "Search for Updated Actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('actor shows in reponse', () => {",
									"    const res = pm.response.json()",
									"    const resString = JSON.stringify(res)",
									"    pm.globals.set('username', resString)",
									"    const hasCharacterName = resString.includes('\"character_name\":\"Addam Marbrand\"')",
									"    const hasNoActorName = resString.includes('\"actor_name\":\"B.J. Hogg Updated\"')",
									"    pm.expect(hasCharacterName).to.be.true",
									"    pm.expect(hasNoActorName).to.be.true",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8090/search?q=B.J.%20Hogg%20Updated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "B.J.%20Hogg%20Updated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('delete actor', () => {",
									"    pm.response.to.have.status(204)",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "http://localhost:8090/actors/{{actor_id}}"
					},
					"response": []
				},
				{
					"name": "Search for Deleted Actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('actor shows in reponse', () => {",
									"    const res = pm.response.json()",
									"    const resString = JSON.stringify(res)",
									"    pm.globals.set('username', resString)",
									"    const hasNoResult = resString.includes('\"hits\":[]')",
									"    pm.expect(hasNoResult).to.be.true",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8090/search?q=B.J.%20Hogg%20Updated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "B.J.%20Hogg%20Updated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for Character Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('actor shows in reponse', () => {",
									"    const res = pm.response.json()",
									"    const resString = JSON.stringify(res)",
									"    pm.globals.set('username', resString)",
									"    const hasCharacterName = resString.includes('\"character_name\":\"Addam Marbrand\"')",
									"    const hasNoActorName = resString.includes('\"actor_name\":\"\"')",
									"    pm.expect(hasCharacterName).to.be.true",
									"    pm.expect(hasNoActorName).to.be.true",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8090/search?q=Addam%20Marbrand",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "Addam%20Marbrand"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('delete character', () => {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "http://localhost:8090/characters/{{character2_id}}"
					},
					"response": []
				},
				{
					"name": "Search for Deleted Character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('actor shows in reponse', () => {",
									"    const res = pm.response.json()",
									"    const resString = JSON.stringify(res)",
									"    pm.globals.set('username', resString)",
									"    const hasNoResult = resString.includes('\"hits\":[]')",
									"    pm.expect(hasNoResult).to.be.true",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8090/search?q=Addam%20Marbrand",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "Addam%20Marbrand"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8090/search?q=hello",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "hello"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Initialize Elastic Search",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"mappings\": {\n        \"properties\": {\n            \"character_id\": {\"type\": \"integer\"},\n            \"character_name\": {\"type\": \"text\"},\n            \"actor_id\": {\"type\": \"integer\"},\n            \"actor_name\": {\"type\": \"text\"}\n        }\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "localhost:9200/got/"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "actor_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "character_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "character2_id",
			"value": "",
			"type": "string"
		}
	]
}